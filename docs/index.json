[{"name":"parallelism","qualifiedName":"parallelism","href":"parallelism/parallelism-library.html","type":"library","overriddenDepth":0,"packageName":"parallelism","desc":"Parallelism simplified."},{"name":"ParallelizationInterface","qualifiedName":"parallelism.ParallelizationInterface","href":"parallelism/ParallelizationInterface-class.html","type":"class","overriddenDepth":0,"packageName":"parallelism","desc":"The interface that is used to simplify parallelization","enclosedBy":{"name":"parallelism","type":"library","href":"parallelism/parallelism-library.html"}},{"name":"ParallelizationInterface","qualifiedName":"parallelism.ParallelizationInterface.ParallelizationInterface","href":"parallelism/ParallelizationInterface/ParallelizationInterface.html","type":"constructor","overriddenDepth":0,"packageName":"parallelism","desc":"","enclosedBy":{"name":"ParallelizationInterface","type":"class","href":"parallelism/ParallelizationInterface-class.html"}},{"name":"forceKill","qualifiedName":"parallelism.ParallelizationInterface.forceKill","href":"parallelism/ParallelizationInterface/forceKill.html","type":"method","overriddenDepth":0,"packageName":"parallelism","desc":"Kill the relevant Isolates IMMEDIATELY irrespective of pending inputs","enclosedBy":{"name":"ParallelizationInterface","type":"class","href":"parallelism/ParallelizationInterface-class.html"}},{"name":"kill","qualifiedName":"parallelism.ParallelizationInterface.kill","href":"parallelism/ParallelizationInterface/kill.html","type":"method","overriddenDepth":0,"packageName":"parallelism","desc":"Kill the relevant Isolates after processing all current inputs","enclosedBy":{"name":"ParallelizationInterface","type":"class","href":"parallelism/ParallelizationInterface-class.html"}},{"name":"send","qualifiedName":"parallelism.ParallelizationInterface.send","href":"parallelism/ParallelizationInterface/send.html","type":"method","overriddenDepth":0,"packageName":"parallelism","desc":"Send data for processing;","enclosedBy":{"name":"ParallelizationInterface","type":"class","href":"parallelism/ParallelizationInterface-class.html"}},{"name":"start","qualifiedName":"parallelism.ParallelizationInterface.start","href":"parallelism/ParallelizationInterface/start.html","type":"method","overriddenDepth":0,"packageName":"parallelism","desc":"Start the required Isolates and perform a \"hand-shake\"","enclosedBy":{"name":"ParallelizationInterface","type":"class","href":"parallelism/ParallelizationInterface-class.html"}},{"name":"stream","qualifiedName":"parallelism.ParallelizationInterface.stream","href":"parallelism/ParallelizationInterface/stream.html","type":"property","overriddenDepth":0,"packageName":"parallelism","desc":"A Stream with processed outputs","enclosedBy":{"name":"ParallelizationInterface","type":"class","href":"parallelism/ParallelizationInterface-class.html"}},{"name":"Process","qualifiedName":"parallelism.Process","href":"parallelism/Process-class.html","type":"class","overriddenDepth":0,"packageName":"parallelism","desc":"A container within which to run a processLoop","enclosedBy":{"name":"parallelism","type":"library","href":"parallelism/parallelism-library.html"}},{"name":"Process","qualifiedName":"parallelism.Process.Process","href":"parallelism/Process/Process.html","type":"constructor","overriddenDepth":0,"packageName":"parallelism","desc":"Create a Process. Use start to activate it","enclosedBy":{"name":"Process","type":"class","href":"parallelism/Process-class.html"}},{"name":"forceKill","qualifiedName":"parallelism.Process.forceKill","href":"parallelism/Process/forceKill.html","type":"method","overriddenDepth":1,"packageName":"parallelism","desc":"Kill the Process right NOW irrespective or unprocessed inputs","enclosedBy":{"name":"Process","type":"class","href":"parallelism/Process-class.html"}},{"name":"kill","qualifiedName":"parallelism.Process.kill","href":"parallelism/Process/kill.html","type":"method","overriddenDepth":1,"packageName":"parallelism","desc":"Kill the Process after all current inputs are processed","enclosedBy":{"name":"Process","type":"class","href":"parallelism/Process-class.html"}},{"name":"send","qualifiedName":"parallelism.Process.send","href":"parallelism/Process/send.html","type":"method","overriddenDepth":1,"packageName":"parallelism","desc":"Send data to the Process","enclosedBy":{"name":"Process","type":"class","href":"parallelism/Process-class.html"}},{"name":"start","qualifiedName":"parallelism.Process.start","href":"parallelism/Process/start.html","type":"method","overriddenDepth":1,"packageName":"parallelism","desc":"Start up the Process. Call this before sending any data to the Process","enclosedBy":{"name":"Process","type":"class","href":"parallelism/Process-class.html"}},{"name":"stream","qualifiedName":"parallelism.Process.stream","href":"parallelism/Process/stream.html","type":"property","overriddenDepth":0,"packageName":"parallelism","desc":"Stream with processed outputs","enclosedBy":{"name":"Process","type":"class","href":"parallelism/Process-class.html"}},{"name":"ProcessGroup","qualifiedName":"parallelism.ProcessGroup","href":"parallelism/ProcessGroup-class.html","type":"class","overriddenDepth":0,"packageName":"parallelism","desc":"Create a bunch of Processes that run the same processLoop.","enclosedBy":{"name":"parallelism","type":"library","href":"parallelism/parallelism-library.html"}},{"name":"ProcessGroup","qualifiedName":"parallelism.ProcessGroup.ProcessGroup","href":"parallelism/ProcessGroup/ProcessGroup.html","type":"constructor","overriddenDepth":0,"packageName":"parallelism","desc":"Create a ProcessGroup","enclosedBy":{"name":"ProcessGroup","type":"class","href":"parallelism/ProcessGroup-class.html"}},{"name":"forceKill","qualifiedName":"parallelism.ProcessGroup.forceKill","href":"parallelism/ProcessGroup/forceKill.html","type":"method","overriddenDepth":1,"packageName":"parallelism","desc":"Kill the ProcessGroup right NOW irrespective or unprocessed inputs","enclosedBy":{"name":"ProcessGroup","type":"class","href":"parallelism/ProcessGroup-class.html"}},{"name":"kill","qualifiedName":"parallelism.ProcessGroup.kill","href":"parallelism/ProcessGroup/kill.html","type":"method","overriddenDepth":1,"packageName":"parallelism","desc":"Kill the ProcessGroup after all current inputs are processed","enclosedBy":{"name":"ProcessGroup","type":"class","href":"parallelism/ProcessGroup-class.html"}},{"name":"send","qualifiedName":"parallelism.ProcessGroup.send","href":"parallelism/ProcessGroup/send.html","type":"method","overriddenDepth":1,"packageName":"parallelism","desc":"Send data to the Process","enclosedBy":{"name":"ProcessGroup","type":"class","href":"parallelism/ProcessGroup-class.html"}},{"name":"start","qualifiedName":"parallelism.ProcessGroup.start","href":"parallelism/ProcessGroup/start.html","type":"method","overriddenDepth":1,"packageName":"parallelism","desc":"Start up the ProcessGroup. Call this before sending any data to the\nProcessGroup","enclosedBy":{"name":"ProcessGroup","type":"class","href":"parallelism/ProcessGroup-class.html"}},{"name":"stream","qualifiedName":"parallelism.ProcessGroup.stream","href":"parallelism/ProcessGroup/stream.html","type":"property","overriddenDepth":0,"packageName":"parallelism","desc":"Stream with processed outputs","enclosedBy":{"name":"ProcessGroup","type":"class","href":"parallelism/ProcessGroup-class.html"}},{"name":"ProcessingLine","qualifiedName":"parallelism.ProcessingLine","href":"parallelism/ProcessingLine-class.html","type":"class","overriddenDepth":0,"packageName":"parallelism","desc":"","enclosedBy":{"name":"parallelism","type":"library","href":"parallelism/parallelism-library.html"}},{"name":"ProcessingLine","qualifiedName":"parallelism.ProcessingLine.ProcessingLine","href":"parallelism/ProcessingLine/ProcessingLine.html","type":"constructor","overriddenDepth":0,"packageName":"parallelism","desc":"","enclosedBy":{"name":"ProcessingLine","type":"class","href":"parallelism/ProcessingLine-class.html"}},{"name":"addFinalProcess","qualifiedName":"parallelism.ProcessingLine.addFinalProcess","href":"parallelism/ProcessingLine/addFinalProcess.html","type":"method","overriddenDepth":0,"packageName":"parallelism","desc":"","enclosedBy":{"name":"ProcessingLine","type":"class","href":"parallelism/ProcessingLine-class.html"}},{"name":"addFinalProcessGroup","qualifiedName":"parallelism.ProcessingLine.addFinalProcessGroup","href":"parallelism/ProcessingLine/addFinalProcessGroup.html","type":"method","overriddenDepth":0,"packageName":"parallelism","desc":"","enclosedBy":{"name":"ProcessingLine","type":"class","href":"parallelism/ProcessingLine-class.html"}},{"name":"addFirstProcess","qualifiedName":"parallelism.ProcessingLine.addFirstProcess","href":"parallelism/ProcessingLine/addFirstProcess.html","type":"method","overriddenDepth":0,"packageName":"parallelism","desc":"","enclosedBy":{"name":"ProcessingLine","type":"class","href":"parallelism/ProcessingLine-class.html"}},{"name":"addFirstProcessGroup","qualifiedName":"parallelism.ProcessingLine.addFirstProcessGroup","href":"parallelism/ProcessingLine/addFirstProcessGroup.html","type":"method","overriddenDepth":0,"packageName":"parallelism","desc":"","enclosedBy":{"name":"ProcessingLine","type":"class","href":"parallelism/ProcessingLine-class.html"}},{"name":"addIntermediateProcess","qualifiedName":"parallelism.ProcessingLine.addIntermediateProcess","href":"parallelism/ProcessingLine/addIntermediateProcess.html","type":"method","overriddenDepth":0,"packageName":"parallelism","desc":"","enclosedBy":{"name":"ProcessingLine","type":"class","href":"parallelism/ProcessingLine-class.html"}},{"name":"addIntermediateProcessGroup","qualifiedName":"parallelism.ProcessingLine.addIntermediateProcessGroup","href":"parallelism/ProcessingLine/addIntermediateProcessGroup.html","type":"method","overriddenDepth":0,"packageName":"parallelism","desc":"","enclosedBy":{"name":"ProcessingLine","type":"class","href":"parallelism/ProcessingLine-class.html"}},{"name":"forceKill","qualifiedName":"parallelism.ProcessingLine.forceKill","href":"parallelism/ProcessingLine/forceKill.html","type":"method","overriddenDepth":1,"packageName":"parallelism","desc":"Kill the relevant Isolates IMMEDIATELY irrespective of pending inputs","enclosedBy":{"name":"ProcessingLine","type":"class","href":"parallelism/ProcessingLine-class.html"}},{"name":"kill","qualifiedName":"parallelism.ProcessingLine.kill","href":"parallelism/ProcessingLine/kill.html","type":"method","overriddenDepth":1,"packageName":"parallelism","desc":"Kill the relevant Isolates after processing all current inputs","enclosedBy":{"name":"ProcessingLine","type":"class","href":"parallelism/ProcessingLine-class.html"}},{"name":"send","qualifiedName":"parallelism.ProcessingLine.send","href":"parallelism/ProcessingLine/send.html","type":"method","overriddenDepth":1,"packageName":"parallelism","desc":"Send data for processing;","enclosedBy":{"name":"ProcessingLine","type":"class","href":"parallelism/ProcessingLine-class.html"}},{"name":"start","qualifiedName":"parallelism.ProcessingLine.start","href":"parallelism/ProcessingLine/start.html","type":"method","overriddenDepth":1,"packageName":"parallelism","desc":"Start the required Isolates and perform a \"hand-shake\"","enclosedBy":{"name":"ProcessingLine","type":"class","href":"parallelism/ProcessingLine-class.html"}},{"name":"stream","qualifiedName":"parallelism.ProcessingLine.stream","href":"parallelism/ProcessingLine/stream.html","type":"property","overriddenDepth":0,"packageName":"parallelism","desc":"A Stream with processed outputs","enclosedBy":{"name":"ProcessingLine","type":"class","href":"parallelism/ProcessingLine-class.html"}},{"name":"ReceivePortMod","qualifiedName":"parallelism.ReceivePortMod","href":"parallelism/ReceivePortMod.html","type":"extension","overriddenDepth":0,"packageName":"parallelism","desc":"Small utility modification to ReceivePort","enclosedBy":{"name":"parallelism","type":"library","href":"parallelism/parallelism-library.html"}},{"name":"getBroadcastStream","qualifiedName":"parallelism.ReceivePortMod.getBroadcastStream","href":"parallelism/ReceivePortMod/getBroadcastStream.html","type":"method","overriddenDepth":0,"packageName":"parallelism","desc":"wrapper around asBroadcastStream that prevents StateError (Bad state: Stream has already been listened to.) that occurs when\nasBroadcastStream is called more than once.","enclosedBy":{"name":"ReceivePortMod","type":"extension","href":"parallelism/ReceivePortMod.html"}}]
